<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlockChain</title>
  
  
  <link href="http://lexlady.github.io/atom.xml" rel="self"/>
  
  <link href="http://lexlady.github.io/"/>
  <updated>2022-12-07T12:52:42.216Z</updated>
  <id>http://lexlady.github.io/</id>
  
  <author>
    <name>Lexlady</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringIoC</title>
    <link href="http://lexlady.github.io/2022/12/01/SpringIoC/"/>
    <id>http://lexlady.github.io/2022/12/01/SpringIoC/</id>
    <published>2022-12-01T13:43:42.000Z</published>
    <updated>2022-12-07T12:52:42.216Z</updated>
    
    <content type="html"><![CDATA[<p>简单的对Spring IoC进行介绍<br>要求理解控制反转的概念；<br>它是如何消减程序的耦合问题的？</p><span id="more"></span><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>下面从一个生活实例对控制反转进行解释（也称依赖注入(Dependency Injection,DI)，只是执行角度不同，是同一个概念）</p><blockquote><p>如果我们要吃饭，就可以有两种选择：一是自己做；另一种是下馆子。当我们要自己做时，就需要自己准备食材、进行烹饪。而下馆子只需要根据自己的需要让店家提供。<br>控制反转的思想便包含在了上述的例子中：<strong>将执行操作交给Spring容器</strong>。<br>由容器控制对象的创建以及查找并注入依赖的资源，而资源则集中管理，<u>实现资源的可配置和易管理</u>，<em>降低了使用资源双方的依赖程度，松耦合</em></p></blockquote><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><blockquote><p>在Spring框架中，仅管使用XML配置文件可以很简单地装配Bean，但对于需要配置大量的Bean时，其XML文件会过于庞大，不方便维护。  </p></blockquote><p><strong>因此推荐使用注解(annotation)的方式去装配Bean</strong></p><h2 id="声明Bean的注解"><a href="#声明Bean的注解" class="headerlink" title="声明Bean的注解"></a>声明Bean的注解</h2><ol><li>@Component</li></ol><ul><li>表示一个组件对象(Bean)</li><li>作用于任何层次上</li><li>无明确角色</li><li>一个泛化的概念</li></ul><ol start="2"><li>@Repository</li></ol><ul><li>将数据访问层(Dao)的类标识为Bean</li><li>功能与@Component相同</li></ul><ol start="3"><li>@Service</li></ol><ul><li>标注一个业务逻辑组件类（Service）</li><li>功能与@Component相同</li></ul><ol start="4"><li>@Controller</li></ol><ul><li>用于标注一个控制器组件类（Spring MVC 的Controller）</li><li>功能与@Component相同</li></ul><h2 id="注入Bean的注解"><a href="#注入Bean的注解" class="headerlink" title="注入Bean的注解"></a>注入Bean的注解</h2><ol><li>@Autowired</li></ol><ul><li>可以对类成员变量、方法及构造方法进行标注，完成自动装配的工作</li><li>消除setter getter方法</li></ul><ol start="2"><li>@Resource</li></ol><ul><li>与@Autowired功能一样</li><li>区别：默认是按照名称来装配注入的，只有当找不到与名称匹配的Bean时才会按照类型来装配注入；</li><li>@Recourse的两个属性：<ul><li>name：指定Bean实例名称</li><li>type：指定Bean类型</li></ul></li></ul><ol start="3"><li>@Qualifier</li></ol><ul><li>与@Autowired注解配合使用。当@Autowired需要按照名称来装配注入时，则使用@Qualifier</li></ul><p>Spring IoC容器（ApplicationContext）负责创建和注入Bean。Spring提供使用XML配置、注解、Java配置以及groovy配置实现Bean的创建和注入。</p><h1 id="实例一-（基于注解的依赖注入）"><a href="#实例一-（基于注解的依赖注入）" class="headerlink" title="实例一 （基于注解的依赖注入）"></a>实例一 （基于注解的依赖注入）</h1><blockquote><p>步骤：<br>创建Web应用，导入jar包（Spring4件套、第三方依赖包和spring-aop（用于扫描注解））<br>创建Annotation包<br>在该包下创建DAO层<br>在该包下创建Service层<br>在该包下创建Controller层<br>创建配置类<br>创建测试类</p></blockquote><h3 id="Dao层代码"><a href="#Dao层代码" class="headerlink" title="Dao层代码"></a>Dao层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-comment">//等价于@Repository(name = &quot;theDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">theDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;testDao save&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Service层代码"><a href="#Service层代码" class="headerlink" title="Service层代码"></a>Service层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-meta">@Service</span><br><span class="hljs-comment">//相当于@Service(&quot;theService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">theService</span> &#123;<br>    <span class="hljs-meta">@Resource(name = &quot;theDao&quot;)</span><br>    <span class="hljs-comment">//相当于@Autowired，</span><br>    <span class="hljs-keyword">private</span> theDao testDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;testService save&quot;</span>);<br>        testDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller层代码"><a href="#Controller层代码" class="headerlink" title="Controller层代码"></a>Controller层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">theController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> theService testService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        testService.save();<br>        System.out.println(<span class="hljs-string">&quot;testController save&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//声明当前类是配置类，相当于一个XML文件</span><br><span class="hljs-meta">@ComponentScan(&quot;annotation&quot;)</span>    <span class="hljs-comment">//自动扫描当前包下使用的注解，并注册为Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Configannotation</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAnnotation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">appCon</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(Configannotation.class);<br>        <span class="hljs-type">theController</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>appCon.getBean(theController.class);<br>        tc.save();<br>        appCon.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实例二-（Java配置）"><a href="#实例二-（Java配置）" class="headerlink" title="实例二 （Java配置）"></a>实例二 （Java配置）</h1><p>Java配置是通过@Configuration和@Bean来实现的  </p><blockquote><p>@Configuration声明当前类作为一个配置类<br>@Bean注解在方法上，声明当前方法的返回值为一个Bean</p></blockquote><h3 id="Dao层代码-1"><a href="#Dao层代码-1" class="headerlink" title="Dao层代码"></a>Dao层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">theDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;testDao save&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Service层代码-1"><a href="#Service层代码-1" class="headerlink" title="Service层代码"></a>Service层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">theService</span> &#123;<br>    theDao testDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTestDao</span><span class="hljs-params">(theDao testDao)</span>&#123;<br>        <span class="hljs-built_in">this</span>.testDao = testDao;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        testDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller层代码-1"><a href="#Controller层代码-1" class="headerlink" title="Controller层代码"></a>Controller层代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">theController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    theService testService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTestService</span><span class="hljs-params">(theService testService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.testService = testService;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        testService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//声明当前类是配置类，相当于一个XML文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Configannotation</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> theDao <span class="hljs-title function_">getTestDao</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">theDao</span>();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> theService <span class="hljs-title function_">getTestService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">theService</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">theService</span>();<br>        ts.setTestDao(getTestDao());<br>        <span class="hljs-keyword">return</span> ts;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> theController <span class="hljs-title function_">getTestController</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">theController</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">theController</span>();<br>        ts.setTestService(getTestService());<br>        <span class="hljs-keyword">return</span> ts;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//初始化Spring容器ApplicationContext</span><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">appCon</span> <span class="hljs-operator">=</span> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(Configannotation.class);<br>        <span class="hljs-type">theController</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>appCon.getBean(theController.class);<br>        tc.save();<br>        appCon.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>控制反转是一种通过描述（可以是xml或注解）并通过第三方产生或获取特定对象的方式。<ul><li>在Spring中实现控制反转的是IoC容器</li><li>实现方法是依赖注入</li></ul></li><li>常用注解</li><li>两种Bean的创建和注入：通过对比可以看出，有时候使用Java配置反而更加繁琐。<ul><li>全局配置尽量使用Java配置</li><li>业务Bean的配置尽量使用注解配置</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单的对Spring IoC进行介绍&lt;br&gt;要求理解控制反转的概念；&lt;br&gt;它是如何消减程序的耦合问题的？&lt;/p&gt;</summary>
    
    
    
    <category term="Spring教程" scheme="http://lexlady.github.io/categories/Spring%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lexlady.github.io/2022/12/01/hello-world/"/>
    <id>http://lexlady.github.io/2022/12/01/hello-world/</id>
    <published>2022-12-01T10:01:38.542Z</published>
    <updated>2022-12-01T10:01:38.542Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
