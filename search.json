[{"title":"SpringIoC","url":"/2022/12/01/SpringIoC/","content":"简单的对Spring IoC进行介绍要求理解控制反转的概念；它是如何消减程序的耦合问题的？\n\n基本概念下面从一个生活实例对控制反转进行解释（也称依赖注入(Dependency Injection,DI)，只是执行角度不同，是同一个概念）\n\n如果我们要吃饭，就可以有两种选择：一是自己做；另一种是下馆子。当我们要自己做时，就需要自己准备食材、进行烹饪。而下馆子只需要根据自己的需要让店家提供。控制反转的思想便包含在了上述的例子中：将执行操作交给Spring容器。由容器控制对象的创建以及查找并注入依赖的资源，而资源则集中管理，实现资源的可配置和易管理，降低了使用资源双方的依赖程度，松耦合\n\n常用注解\n在Spring框架中，仅管使用XML配置文件可以很简单地装配Bean，但对于需要配置大量的Bean时，其XML文件会过于庞大，不方便维护。  \n\n因此推荐使用注解(annotation)的方式去装配Bean\n声明Bean的注解\n@Component\n\n\n表示一个组件对象(Bean)\n作用于任何层次上\n无明确角色\n一个泛化的概念\n\n\n@Repository\n\n\n将数据访问层(Dao)的类标识为Bean\n功能与@Component相同\n\n\n@Service\n\n\n标注一个业务逻辑组件类（Service）\n功能与@Component相同\n\n\n@Controller\n\n\n用于标注一个控制器组件类（Spring MVC 的Controller）\n功能与@Component相同\n\n注入Bean的注解\n@Autowired\n\n\n可以对类成员变量、方法及构造方法进行标注，完成自动装配的工作\n消除setter getter方法\n\n\n@Resource\n\n\n与@Autowired功能一样\n区别：默认是按照名称来装配注入的，只有当找不到与名称匹配的Bean时才会按照类型来装配注入；\n@Recourse的两个属性：\nname：指定Bean实例名称\ntype：指定Bean类型\n\n\n\n\n@Qualifier\n\n\n与@Autowired注解配合使用。当@Autowired需要按照名称来装配注入时，则使用@Qualifier\n\nSpring IoC容器（ApplicationContext）负责创建和注入Bean。Spring提供使用XML配置、注解、Java配置以及groovy配置实现Bean的创建和注入。\n实例一 （基于注解的依赖注入）\n步骤：创建Web应用，导入jar包（Spring4件套、第三方依赖包和spring-aop（用于扫描注解））创建Annotation包在该包下创建DAO层在该包下创建Service层在该包下创建Controller层创建配置类创建测试类\n\nDao层代码import ;@Repository//等价于@Repository(name = &quot;theDao&quot;)public class theDao &#123;    public void save() &#123;        System.out.println(&quot;testDao save&quot;);    &#125;&#125;\nService层代码import ;@Service//相当于@Service(&quot;theService&quot;)public class theService &#123;    @Resource(name = &quot;theDao&quot;)    //相当于@Autowired，    private theDao testDao;    public void save() &#123;        System.out.println(&quot;testService save&quot;);        testDao.save();    &#125;&#125;\nController层代码import ;@Controllerpublic class theController &#123;    @Autowired    private theService testService;    public void save() &#123;        testService.save();        System.out.println(&quot;testController save&quot;);    &#125;&#125;\n配置类import ;@Configuration  //声明当前类是配置类，相当于一个XML文件@ComponentScan(&quot;annotation&quot;)    //自动扫描当前包下使用的注解，并注册为Beanpublic class Configannotation &#123;    ...&#125;\n测试类import ;public class TestAnnotation &#123;    public static void main(String[] args) &#123;        AnnotationConfigApplicationContext appCon =             new AnnotationConfigApplicationContext(Configannotation.class);        theController tc =appCon.getBean(theController.class);        tc.save();        appCon.close();    &#125;&#125;\n实例二 （Java配置）Java配置是通过@Configuration和@Bean来实现的  \n\n@Configuration声明当前类作为一个配置类@Bean注解在方法上，声明当前方法的返回值为一个Bean\n\nDao层代码import ;public class theDao &#123;    public void save() &#123;        System.out.println(&quot;testDao save&quot;);    &#125;&#125;\nService层代码import ;public class theService &#123;    theDao testDao;    public void setTestDao(theDao testDao)&#123;        this.testDao = testDao;    &#125;    public void save() &#123;        testDao.save();    &#125;&#125;\nController层代码import ;public class theController &#123;    @Autowired    theService testService;    public void setTestService(theService testService) &#123;        this.testService = testService;    &#125;    public void save() &#123;        testService.save();    &#125;&#125;\n配置类import ;@Configuration  //声明当前类是配置类，相当于一个XML文件public class Configannotation &#123;    @Bean    public theDao getTestDao() &#123;        return new theDao();    &#125;    @Bean    public theService getTestService() &#123;        theService ts = new theService();        ts.setTestDao(getTestDao());        return ts;    &#125;    @Bean    public theController getTestController() &#123;        theController ts = new theController();        ts.setTestService(getTestService());        return ts;    &#125;&#125;\n测试类import ;public class TestConfig &#123;    public static void main(String[] args) &#123;        //初始化Spring容器ApplicationContext        AnnotationConfigApplicationContext appCon =         new AnnotationConfigApplicationContext(Configannotation.class);        theController tc =appCon.getBean(theController.class);        tc.save();        appCon.close();    &#125;&#125;\n总结\n控制反转是一种通过描述（可以是xml或注解）并通过第三方产生或获取特定对象的方式。\n在Spring中实现控制反转的是IoC容器\n实现方法是依赖注入\n\n\n常用注解\n两种Bean的创建和注入：通过对比可以看出，有时候使用Java配置反而更加繁琐。\n全局配置尽量使用Java配置\n业务Bean的配置尽量使用注解配置\n\n\n\n","categories":["Spring教程"]},{"title":"Hello World","url":"/2022/12/01/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]